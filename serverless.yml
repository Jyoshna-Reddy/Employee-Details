# service: dynamodb-crud-api
# provider:
#   name: aws
#   runtime: nodejs18.x
#   stage: dev
#   region: ap-south-1
#   environment:
#     DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}
# custom:
#   postsTableName: posts-table-${self:provider.stage}
# plugins:
#   - serverless-iam-roles-per-function
# functions:
#   getPost:
#     handler: api.getPost
#     name: get-post
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: post/{postId}
#           method: GET
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - "dynamodb:GetItem"
#         Resource: !GetAtt PostsTable.Arn
#   createPost:
#     handler: api.createPost
#     name: create-post
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: post
#           method: POST
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - "dynamodb:PutItem"
#         Resource: !GetAtt PostsTable.Arn
#   updatePost:
#     handler: api.updatePost
#     name: update-post
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: post/{postId}
#           method: PUT
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - "dynamodb:UpdateItem"
#         Resource: !GetAtt PostsTable.Arn
#   deletePost:
#     handler: api.deletePost
#     name: delete-post
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: post/{postId}
#           method: DELETE
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - "dynamodb:DeleteItem"
#         Resource: !GetAtt PostsTable.Arn
#   getAllPosts:
#     handler: api.getAllPosts
#     name: get-all-posts
#     memorySize: 128 # mb
#     timeout: 5 # seconds
#     events:
#       - http:
#           path: posts
#           method: GET
#     iamRoleStatements:
#       - Effect: "Allow"
#         Action:
#           - "dynamodb:Scan"
#         Resource: !GetAtt PostsTable.Arn
# resources:
#   Resources:
#     PostsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:custom.postsTableName}
#         AttributeDefinitions:
#           - AttributeName: postId
#             AttributeType: S
#         KeySchema:
#           - AttributeName: postId
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1


service: employee-details-service # Change to your service name
provider:
  name: aws
  runtime: nodejs14.x # Change to your desired Node.js runtime version
  stage: dev
  region: ap-south-1 # Change to your desired AWS region
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.employeeTableName}
custom:
  employeeTableName: employee-table-${self:provider.stage}
plugins:
  - serverless-iam-roles-per-function
functions:
  getEmployee:
    handler: api.getEmployee
    name: get-employee
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employee/{employeeId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt EmployeeTable.Arn
  createEmployee:
    handler: api.createEmployee
    name: create-employee
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employee
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt EmployeeTable.Arn
  updateSalary:
    handler: api.updateSalary
    name: update-salary
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employee/{employeeId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt EmployeeTable.Arn
  # deleteEmployee:
  #   handler: api.deleteEmployee
  #   name: delete-employee
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: employee/{employeeId}
  #         method: DELETE
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - "dynamodb:DeleteItem"
  #       Resource: !GetAtt EmployeeTable.Arn
  listEmployees:
    handler: api.listEmployees
    name: list-employees
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: employees
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt EmployeeTable.Arn
resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTableName}
        AttributeDefinitions:
          - AttributeName: EmployeeID
            AttributeType: S
        KeySchema:
          - AttributeName: EmployeeID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1 # Adjust based on your workload
